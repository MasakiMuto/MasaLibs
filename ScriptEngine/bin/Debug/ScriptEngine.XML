<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScriptEngine</name>
    </assembly>
    <members>
        <member name="T:Masa.ScriptEngine.ScriptManager">
            <summary>
            ScriptDataをさらにラップしたクラス。エラーログ出力機能付き
            </summary>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptManager.GetScriptDirectory(System.String)">
            <summary>
            Rootと結合したパスを返す
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptManager.Load(System.String,System.Type,System.String[],System.String[])">
            <summary>
            スクリプト読み込み。失敗するとエラーログに記録して、その例外を投げる
            </summary>
            <param name="fileName">スクリプトファイル名</param>
            <param name="target">対象の型</param>
            <param name="table"></param>
            <param name="labels"></param>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptManager.LoadFromDirectory(System.String,System.Type,System.String[],System.String[])">
            <summary>
            root\dirのディレクトリ(当該ディレクトリひとつだけ)が含む*.mssファイルを全て読み込む
            </summary>
            <param name="dir"></param>
            <param name="target"></param>
            <param name="table"></param>
            <param name="labels"></param>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptManager.EnumrateDirectoryScript(System.String)">
            <summary>
            Root\\directoryにあるスクリプトファイルを列挙
            </summary>
            <param name="directory"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptManager.EnumrateDirectoryScriptByKey(System.String)">
            <summary>
            Root\\directoryにあるスクリプトファイルのKey(拡張子抜きファイル名)を列挙
            </summary>
            <param name="directory"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptManager.DeleteScript(System.String)">
            <summary>
            スクリプトを破棄する。指定したスクリプトが存在しなくても問題は起こさない
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Masa.ScriptEngine.ScriptManager.RootDirectory">
            <summary>
            ファイルシステムから直接スクリプトを読むときのroot
            </summary>
        </member>
        <member name="P:Masa.ScriptEngine.ScriptManager.CodeMapper">
            <summary>
            非Packファイルからスクリプトを読む時の文字列変換関数
            </summary>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.#ctor(System.Object[],System.Type,System.String[])">
            <summary>
            文字列列挙付き
            </summary>
            <param name="token"></param>
            <param name="targetType"></param>
            <param name="nameValueTable"></param>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.GetStaticMethodInfo">
            <summary>
            用意されたメソッドの定義
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.MakeTargetInfoCache(System.Type)">
            <summary>
            型情報のキャッシュを作る。明示的に呼ばなくても必要なら作られる
            </summary>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.GetLabelStatement(System.String)">
            <summary>
            ラベルの塊をActionとして返す。ラベルの初回読み込みでは式木をコンパイルするので速度に注意。以降はキャッシュされる
            </summary>
            <param name="label"></param>
            <returns>ラベルが存在しなければnull</returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.Compile(System.Reflection.Emit.MethodBuilder)">
            <summary>
            スクリプト全体をコンパイルする
            </summary>
            <param name="mtd">出力先</param>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.ParseVariable(System.String)">
            <summary>
            文字列を変数(内部変数、Global変数、外部変数、列挙文字列すべて)としてパース。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.GetOptions(System.Object[])">
            <summary>
            
            </summary>
            <param name="line">引数とオプションがくっついたトークン列</param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.ProcessAssign(Masa.ScriptEngine.Line)">
            <summary>
            代入処理
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.ProcessNormalStatement(Masa.ScriptEngine.Line)">
            <summary>
            if ループ stateなどの制御文や、fireなどの外部命令を処理
            一般文、つまり代入文や宣言文以外の、「識別子 引数リスト・・・」となる文
            </summary>
            <param name="line">PareBlockやOptionBlockに整形済みのトークン行</param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.CallExternalMethod(System.String,System.Object[])">
            <summary>
            Targetの持つメソッドや関数を呼ぶ
            </summary>
            <param name="id">メソッド名</param>
            <param name="l">名前を除いたトークン列</param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.GetBlock(Masa.ScriptEngine.Line)">
            <summary>
            
            </summary>
            <param name="user">ブロックを必要としているLine</param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.GetBlockWithBreak(Masa.ScriptEngine.Line,System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
            <summary>
            
            </summary>
            <param name="user">whileなどのExpression</param>
            <param name="test">ループの終了条件</param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.ProcessUnaryExpression(System.Object[])">
            <summary>
            単項演算子を処理してExpressionにする
            </summary>
            <param name="tokens">ExpressionとMarkの混合物</param>
            <returns>単項演算子処理済みのExpressionと(二項演算子であるはずの)Markの混合物</returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.MakeBinaryExpression(Masa.ScriptEngine.Marks,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            戻り値は全てfloat型
            </summary>
            <param name="m"></param>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.GetArgs(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="line">引数とオプションがくっついたトークン列</param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.ParsePareBlock(Masa.ScriptEngine.PareBlock)">
            <summary>
            PareBlockをパースしてひとつのfloatExpressionにする
            </summary>
            <param name="pare"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ExpressionTreeMaker.ProcessToExpressionAndMark(Masa.ScriptEngine.PareBlock)">
            <summary>
            括弧やOptionを分離済みのトークンをExpressionと2項演算子Markの塊に変換
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.PackedScriptManager.PackScript(System.String,System.String[])">
            <summary>
            指定パス以下の*.mssファイルを全てパッキングする。パックの中のキーは指定パスからの相対パス
            </summary>
            <param name="output">出力ファイル名</param>
            <param name="directory">パックするスクリプトファイルを格納しているディレクトリ</param>
        </member>
        <member name="M:Masa.ScriptEngine.PackedScriptManager.PackScript(System.String,System.Func{System.String,System.String},System.String[])">
            <summary>
            指定パス以下の*.mssファイルを全てパッキングする。パックの中のキーは指定パスからの相対パス(script\hoge\piyo.mssならhoge\piyo.mss)
            </summary>
            <param name="output">出力ファイル名</param>
            <param name="codeMapper">スクリプトファイルの生テキストから実際に使用するもの文字列への変換関数。プリプロセッサなど</param>
            <param name="directory">パックするスクリプトファイルを格納しているディレクトリ</param>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptDataBase.GetScriptRunner(System.Object)">
            <summary>
            
            </summary>
            <param name="target">スクリプトを使用するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptData.Load(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="code">プリプロセス済みコード</param>
            <param name="name">ファイル名</param>
        </member>
        <member name="T:Masa.ScriptEngine.PareBlock">
            <summary>
            ()の中身を表す構造体。最初と最後に( ) はつかない
            </summary>
        </member>
        <member name="T:Masa.ScriptEngine.OptionBlock">
            <summary>
            オプション項を表す構造体。最初に : はつかない
            </summary>
        </member>
        <member name="T:Masa.ScriptEngine.Parser">
            <summary>
            Scannerが作ったトークン列をLine, PareBlock, OptionBlockなどにまとめる
            </summary>
        </member>
        <member name="M:Masa.ScriptEngine.Parser.ParseStatement(System.Object[])">
            <summary>
            1文を生トークン、PareBlock, OptionBlockにばらす
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.Parser.GroupToPareBlock(System.Object[])">
            <summary>
            5 20 ( 3 + 4 * (2 + 1) ) : from x y : way 360 (5 + 4)
            5 20 PareBlock{ 3 + 4 * PareBlock{2 + 1} } : from x y : way 360 PareBlock{5 + 4}
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.Parser.GroupToOptionBlock(System.Object[])">
            <summary>
            5 20 Pareblock : from x y : way 360 Pareblock
            5 20 Pareblock OptionBlock{from, x, y}, OptionBlock{way 360, Pareblock}
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.Parser.CheckBlockLevel(System.Object[])">
            <summary>
            行がどれだけインデントされているか取得する
            </summary>
            <param name="line">調べる行</param>
            <returns>インデント数</returns>
        </member>
        <member name="M:Masa.ScriptEngine.Parser.CleanLine(System.Object[])">
            <summary>
            タブ、改行、コメントなどを取り除く
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Pos">
            なし
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Neg">
            + 演算子にも符号にも
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Mul">
            -
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Div">
            *
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Mod">
            /
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Not">
            %
        </member>
        <member name="F:Masa.ScriptEngine.Marks.And">
            !
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "F:Masa.ScriptEngine.Marks.Or" で無視されました -->
        <member name="F:Masa.ScriptEngine.Marks.Equal">
            |
        </member>
        <member name="F:Masa.ScriptEngine.Marks.NotEqual">
            比較等号 ==
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Big">
            !=
        </member>
        <member name="F:Masa.ScriptEngine.Marks.BigEqual">
            >
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Small">
            >=
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "F:Masa.ScriptEngine.Marks.SmallEqual" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "F:Masa.ScriptEngine.Marks.Sub" で無視されました -->
        <member name="F:Masa.ScriptEngine.Marks.Inc">
            代入 =
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Dec">
            ++
        </member>
        <member name="F:Masa.ScriptEngine.Marks.SubPos">
            --
        </member>
        <member name="F:Masa.ScriptEngine.Marks.SubNeg">
            +=
        </member>
        <member name="F:Masa.ScriptEngine.Marks.SubMul">
            -=
        </member>
        <member name="F:Masa.ScriptEngine.Marks.SubDiv">
            *=
        </member>
        <member name="F:Masa.ScriptEngine.Marks.PareOp">
            /=
        </member>
        <member name="F:Masa.ScriptEngine.Marks.PareCl">
            (
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Colon">
            )
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Tab">
            : オプション文マーカー
        </member>
        <member name="F:Masa.ScriptEngine.Marks.Define">
            コメント
        </member>
        <member name="T:Masa.ScriptEngine.Scanner">
            <summary>
            スクリプトコードを読み込んで単語単位にばらしてデータ化するひと。
            </summary>
        </member>
        <member name="M:Masa.ScriptEngine.Scanner.Split(System.String)">
            <summary>
            単語に分割する(;含めてコメント除去、@@リテラルを@始まりの1単語に)
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.Scanner.IsSingleMark(System.Char)">
            <summary>
            単項演算子か
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Masa.ScriptEngine.Scanner.IsIdLetter(System.Char)">
            <summary>
            識別子の1文字目として使える文字か
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:Masa.ScriptEngine.Scanner.Tokens">
            <summary>
            string,Mark,floatのどれか
            </summary>
        </member>
        <member name="T:Masa.ScriptEngine.FileScriptData">
            <summary>
            スクリプトの読み込み、リロード、及びScriptRunnerの生成をするクラス
            </summary>
        </member>
        <member name="M:Masa.ScriptEngine.FileScriptData.#ctor(System.String,System.Type,System.String[],System.String[])">
            <summary>
            初期化して、かつLoadも行う
            </summary>
            <param name="file">スクリプトファイルへのパス</param>
            <param name="target">スクリプトを使用するクラスの型</param>
            <param name="table">文字列使用用テーブル</param>
            <param name="labels">init以外に外部から使用したいラベル。入れておくと読み込みと同時にキャッシュする</param>
        </member>
        <member name="M:Masa.ScriptEngine.FileScriptData.Load">
            <summary>
            リロードするときに明示的に呼び出す
            </summary>
        </member>
        <member name="T:Masa.ScriptEngine.ScriptRunner">
            <summary>
            読み込み済みのTreeを使ってスクリプトの実行をするクラス
            </summary>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptRunner.#ctor(Masa.ScriptEngine.IExpressionTreeMaker,System.Object)">
            <summary>
            initステートメントがあれば自動で実行する
            </summary>
            <param name="tree"></param>
            <param name="target"></param>
        </member>
        <member name="M:Masa.ScriptEngine.ScriptRunner.InvokeLabelAction(System.String)">
            <summary>
            labelのブロックを実行する。存在しない場合は何もしない
            </summary>
            <param name="label"></param>
        </member>
        <member name="P:Masa.ScriptEngine.ScriptRunner.Count">
            <summary>
            このオブジェクトが生成されてからのUpdate呼び出し回数
            </summary>
        </member>
        <member name="P:Masa.ScriptEngine.ScriptRunner.StateCount">
            <summary>
            最後にStateが変更されてからのUpdate呼び出し回数
            </summary>
        </member>
        <member name="F:Masa.ScriptEngine.Line.Number">
            <summary>
            テキストエディタ上での行番号
            1からスタートし、コメントや空行も数える
            </summary>
        </member>
        <member name="F:Masa.ScriptEngine.Line.Index">
            <summary>
            処理上の行番号で、インデックスに対応。0からスタート
            コメントや空行を除いた行の番号
            </summary>
        </member>
    </members>
</doc>
